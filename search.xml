<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>IIC协议时序分析</title>
      <link href="/2020/02/12/IIC/"/>
      <url>/2020/02/12/IIC/</url>
      
        <content type="html"><![CDATA[<h1 id="IIC协议时序分析"><a href="#IIC协议时序分析" class="headerlink" title="IIC协议时序分析"></a>IIC协议时序分析</h1><h2 id="IIC简介"><a href="#IIC简介" class="headerlink" title="IIC简介"></a>IIC简介</h2><p>IIC（Inter-Integrated Circuit）其实是IICBus简称，所以中文应该叫集成电路总线，它是一种串行通信总线，使用多主从架构，由飞利浦公司在1980年代为了让主板、嵌入式系统或手机用以连接低速周边设备而发展。</p><h2 id="IIC组成"><a href="#IIC组成" class="headerlink" title="IIC组成"></a>IIC组成</h2><p>IIC串行总线一般有两根信号线，一根是<code>双向</code>的数据线SDA，另一根是时钟线SCL。所有接到IIC总线设备上的串行数据SDA都接到总线的SDA上，各设备的时钟线SCL接到总线的SCL上。<br>空闲状态：SCL高电平   SDA高电平</p><h2 id="IIC具体协议时序"><a href="#IIC具体协议时序" class="headerlink" title="IIC具体协议时序"></a>IIC具体协议时序</h2><h3 id="开始停止信号"><a href="#开始停止信号" class="headerlink" title="开始停止信号"></a>开始停止信号</h3><p><img src="https://tva1.sinaimg.cn/large/0082zybply1gbtlofog3uj30nf064jre.jpg" alt="start"><br>代码实现：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">void <span class="constructor">IIC_Start(<span class="params">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    I2C2_SDA_H;  <span class="comment">//拉高数据线</span></span><br><span class="line"></span><br><span class="line">    I2C2_SCL_H;  <span class="comment">//拉高时钟线</span></span><br><span class="line"></span><br><span class="line">    <span class="constructor">I2C2_delay()</span>;<span class="comment">//现在延时为16us， 5</span></span><br><span class="line"></span><br><span class="line">    I2C2_SDA_L; <span class="comment">//产生下降沿</span></span><br><span class="line"></span><br><span class="line">    <span class="constructor">I2C2_delay()</span>;</span><br><span class="line"></span><br><span class="line">    I2C2_SCL_L;<span class="comment">//拉低时钟线，钳住I2C总线，准备发数据或者接受数据</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">void <span class="constructor">IIC_Stop(<span class="params">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    I2C2_SCL_L;</span><br><span class="line"></span><br><span class="line">    <span class="constructor">I2C2_delay()</span>;</span><br><span class="line"></span><br><span class="line">    I2C2_SDA_L;  <span class="comment">//停止，CLK上升沿</span></span><br><span class="line"></span><br><span class="line">    <span class="constructor">I2C2_delay()</span>;</span><br><span class="line"></span><br><span class="line">    I2C2_SCL_H;  <span class="comment">//拉高时钟线</span></span><br><span class="line"></span><br><span class="line">    <span class="constructor">I2C2_delay()</span>;</span><br><span class="line"></span><br><span class="line">    I2C2_SDA_H;  <span class="comment">//拉高数据线，结束信号</span></span><br><span class="line"></span><br><span class="line">    <span class="constructor">I2C2_delay()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据传输"><a href="#数据传输" class="headerlink" title="数据传输"></a>数据传输</h3><p><img src="https://img-blog.csdnimg.cn/2019060815381722.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1cGVyODI4,size_16,color_FFFFFF,t_70" alt="tranmform"></p><p>每一个字节必须保证是<code>8位长度</code>。数据传输时，<code>先传送最高位(MSB)</code>，每一个被传送的字节后面都必须<code>跟随一位应答位</code>，即一帧共有9位。</p><p>代码实现：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write_byte</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> dat)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">        dat = dat&lt;&lt;<span class="number">1</span>;</span><br><span class="line">        I2C2_SCL_L;</span><br><span class="line">        <span class="built_in">delay</span>();</span><br><span class="line">        SDA = CY;    <span class="comment">//类似于8086的PSW的CF位 即左移data溢出位进入CY</span></span><br><span class="line">        <span class="built_in">delay</span>();</span><br><span class="line">        I2C2_SCL_H;</span><br><span class="line">        <span class="built_in">delay</span>();    </span><br><span class="line">    &#125;</span><br><span class="line">    I2C2_SCL_L;</span><br><span class="line">    <span class="built_in">delay</span>();</span><br><span class="line">    I2C2_SDA_H;</span><br><span class="line">    <span class="built_in">delay</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="title">read_byte</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> i = <span class="number">0</span>, dat;</span><br><span class="line">    I2C2_SCL_L;</span><br><span class="line">    <span class="built_in">delay</span>();</span><br><span class="line">    I2C2_SDA_H;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">        I2C2_SCL_H;</span><br><span class="line">        <span class="built_in">delay</span>();</span><br><span class="line">        dat = (dat&lt;&lt;<span class="number">1</span>) | SDA;</span><br><span class="line">        I2C2_SCL_L;</span><br><span class="line">        <span class="built_in">delay</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="应答"><a href="#应答" class="headerlink" title="应答"></a>应答</h3><p>当IIC主机(不一定是发送端还是接收端)将8位数据或命令传出后，会将SDA信号设置为输入，等待从机应答(等待SDA由高电平拉为低电平)若从机正确应答，表示数据或命令传输成功，否则传输失败。<code>注意：应答信号是数据接收方发送给数据发送方的。</code><br><img src="https://tva1.sinaimg.cn/large/0082zybply1gbtlmfamm4j30ny09oaab.jpg" alt="reponse"><br>代码实现：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">void Respons()</span><br><span class="line">&#123;</span><br><span class="line">    I2C2_SDA_L<span class="comment">;</span></span><br><span class="line">    delay()<span class="comment">;</span></span><br><span class="line">    I2C2_SCL_H<span class="comment">;</span></span><br><span class="line">    delay()<span class="comment">;</span></span><br><span class="line">    I2C2_SCL_L<span class="comment">;</span></span><br><span class="line">    delay()<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void NoRespons()</span><br><span class="line">&#123;</span><br><span class="line">    I2C2_SDA_H<span class="comment">;</span></span><br><span class="line">    delay()<span class="comment">;</span></span><br><span class="line">    I2C2_SCL_H<span class="comment">;</span></span><br><span class="line">    delay()<span class="comment">;</span></span><br><span class="line">    I2C2_SCL_L<span class="comment">;</span></span><br><span class="line">    delay()<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 总线协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IIC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04-shell</title>
      <link href="/2020/02/10/04-shell/"/>
      <url>/2020/02/10/04-shell/</url>
      
        <content type="html"><![CDATA[<h1 id="shell基础-函数"><a href="#shell基础-函数" class="headerlink" title="shell基础-函数"></a>shell基础-函数</h1><h2 id="hell函数调用"><a href="#hell函数调用" class="headerlink" title="hell函数调用"></a>hell函数调用</h2><ul><li>函数调用格式：<ul><li>方式1：<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">value_name</span>=`function_name [arg1 arg2<span class="built_in">..</span>.]`</span><br></pre></td></tr></table></figure></li><li>方式2：<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">function_name [arg1 arg2.<span class="string">..</span>]</span><br><span class="line"><span class="keyword">echo</span> $?</span><br></pre></td></tr></table></figure></li><li>例子：<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">grep_user()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">R</span>=`grep <span class="string">"<span class="variable">$1</span>"</span> /etc/passwd | wc -l`</span><br><span class="line">    echo <span class="variable">$S</span></span><br><span class="line">    return <span class="variable">$R</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">echo -n <span class="string">"input username:"</span></span><br><span class="line">read USER</span><br><span class="line">grep_user <span class="variable">$USER</span></span><br><span class="line">echo <span class="string">"-$?-"</span></span><br></pre></td></tr></table></figure><h2 id="函数变量的作用域"><a href="#函数变量的作用域" class="headerlink" title="函数变量的作用域"></a>函数变量的作用域</h2></li></ul></li><li>全局作用域：在脚本得其他任何地方都能够访问该变量</li><li>局部作用域：只能在声明变量得作用域内访问</li><li>声明局部变量得格式：<figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">local <span class="keyword">variable</span><span class="number">_n</span>ame=<span class="keyword">value</span></span><br></pre></td></tr></table></figure></li><li>全部变量得声明  <figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">variable</span><span class="number">_n</span>ame=<span class="keyword">value</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03-shell</title>
      <link href="/2020/02/10/03-shell/"/>
      <url>/2020/02/10/03-shell/</url>
      
        <content type="html"><![CDATA[<h1 id="shell基础-循环语句"><a href="#shell基础-循环语句" class="headerlink" title="shell基础-循环语句"></a>shell基础-循环语句</h1><h2 id="循环语句for的用法"><a href="#循环语句for的用法" class="headerlink" title="循环语句for的用法"></a>循环语句for的用法</h2><ul><li>当循环次数<code>已知或确定</code>时，使用for循环语句来多次执行一条或一组命令。  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 变量名 <span class="keyword">in</span> 单词表</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        命令表</span><br><span class="line">    <span class="keyword">done</span></span><br></pre></td></tr></table></figure></li><li>也可以使用类语法来实现for循环  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ((I = 1; i &lt;= 10; I++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"I=<span class="variable">$I</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="循环语句while的用法"><a href="#循环语句while的用法" class="headerlink" title="循环语句while的用法"></a>循环语句while的用法</h2></li><li>while语句先测试其后的命令或表达式的值，如果为真，就执行一次循环体中的命令，然后再测试该命令或表达式的值，执行循环体，知道该命令或表达式为假时退出循环.  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 命令或表达式</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        命令表</span><br><span class="line">    <span class="keyword">done</span></span><br></pre></td></tr></table></figure></li><li>例子：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#！/bin/bash</span></span><br><span class="line">I=0</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$I</span> -lt 5 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    I=`expr <span class="variable">$I</span> + 1`</span><br><span class="line">    <span class="built_in">echo</span> -n <span class="string">"input score:"</span></span><br><span class="line">    <span class="built_in">read</span> S</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> `expr <span class="variable">$S</span> / 10` <span class="keyword">in</span></span><br><span class="line">        10|9)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"A"</span></span><br><span class="line">            ;;</span><br><span class="line">        6|7|8)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"B"</span></span><br><span class="line">            ;;</span><br><span class="line">        *)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"C"</span></span><br><span class="line">            ;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="循环控制语句"><a href="#循环控制语句" class="headerlink" title="循环控制语句"></a>循环控制语句</h2></li><li>break<ul><li>break n&#8195;则跳出n层</li></ul></li><li>continue<ul><li>continue语句则马上转到最近一层循环语句的下一轮循环上</li><li>continue&#8195;n则转到最近n层循环语句的下一轮循环上</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02-shell</title>
      <link href="/2020/02/09/02-shell/"/>
      <url>/2020/02/09/02-shell/</url>
      
        <content type="html"><![CDATA[<h1 id="shell基础-分支语句"><a href="#shell基础-分支语句" class="headerlink" title="shell基础-分支语句"></a>shell基础-分支语句</h1><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><ul><li>条件语句<pre><code><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">if</span>  <span class="string">表达式</span></span><br><span class="line">    <span class="attr">then</span> <span class="string">命令表</span></span><br><span class="line"><span class="attr">fi</span></span><br></pre></td></tr></table></figure></code></pre><ul><li>如果表达式为<code>真</code>，则执行命令表中的命令；否则<code>退出if语句</code>，即执行`fi后面的语句</li><li>if和fi时条件语句的语句括号，`必须成对使用</li><li>命令表中的命令可以是一条，也可以时若干条<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#！/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>[ <span class="variable">$#</span> -ne <span class="number">1</span>]</span><br><span class="line">then</span><br><span class="line">    echo <span class="string">"usage:$0 filename"</span></span><br><span class="line">    <span class="keyword">exit</span></span><br><span class="line">fi</span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 表达式</span><br><span class="line">then 命令表<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span> 命令表<span class="number">2</span></span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li><li>如果表达式为<code>真</code>，则执行<code>命令表1</code>中的命令，再退出if语句，否则执行<code>命令表2</code>中的语句，再退出if语句<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#！/bin/bash</span></span><br><span class="line"><span class="keyword">if</span> [ -d <span class="variable">$1</span> ]</span><br><span class="line">then</span><br><span class="line">    echo <span class="string">"$1 is a directory"</span></span><br><span class="line">    <span class="keyword">exit</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">if</span> [ -f <span class="variable">$1</span> ]</span><br><span class="line">    then</span><br><span class="line">        echo <span class="string">"$1 is a common file"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        echo <span class="string">"unknown"</span></span><br><span class="line">    fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="多路分支语句"><a href="#多路分支语句" class="headerlink" title="多路分支语句"></a>多路分支语句</h2><ul><li>多路分支语句<ul><li>多路分支语句case用于多重条件测试，语法结构清晰自然   <figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> 字符串变量 <span class="keyword">in</span></span><br><span class="line">    模式<span class="number">1</span>)</span><br><span class="line">            命令表<span class="number">1</span></span><br><span class="line">            ;;</span><br><span class="line">    模式<span class="number">2</span> | 模式<span class="number">3</span>)</span><br><span class="line">            命令表<span class="number">2</span></span><br><span class="line">    ......</span><br><span class="line">    模式n)</span><br><span class="line">            命令表n</span><br><span class="line">esac</span><br></pre></td></tr></table></figure></li></ul></li><li><code>双分号</code>等同于c语言中的break</li></ul>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01-shell</title>
      <link href="/2020/02/09/01-shell/"/>
      <url>/2020/02/09/01-shell/</url>
      
        <content type="html"><![CDATA[<h1 id="shell脚本基础"><a href="#shell脚本基础" class="headerlink" title="shell脚本基础"></a>shell脚本基础</h1><h2 id="echo命令："><a href="#echo命令：" class="headerlink" title="echo命令："></a>echo命令：</h2><ul><li><code>echo &quot;字符串&quot;</code></li><li><code>echo -n “字符串”</code>&#8195;表示不换行</li><li><code>echo $?</code>&#8195; 表示上一条语句的执行结果，<code>0</code>表示<code>真</code>，<code>非0</code>表示<code>假</code></li></ul><h2 id="expr命令："><a href="#expr命令：" class="headerlink" title="expr命令："></a>expr命令：</h2><p>算术运算命令<code>expr</code>主要用于简单的整数运算，包括<code>(+)</code>,<code>(-)</code>,<code>(*)</code>,<code>(/)</code>和求模<code>(%)</code>等操作：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ expr 12 + 5 \* 3</span><br><span class="line">$ expr 3 - 8 / 2</span><br><span class="line">$ A=expr 12 + 5 \* 3</span><br></pre></td></tr></table></figure><p>注:算数运算两边必须加空格，赋值语句两边不能加空格</p><h2 id="test命令："><a href="#test命令：" class="headerlink" title="test命令："></a>test命令：</h2><p><code>test语句</code>可测试三种对象  </p><p><code>字符串</code> <code>整数</code> <code>文件属性</code></p><ul><li>字符串模式<ul><li><code>s1 = s2</code>&#8195;测试两个字符串的内容是否完全一样</li><li><code>s1 ！= s2</code>&#8195; 测试两个字符串的内容是否有差异</li><li><code>-z s1</code>&#8195; 测试s1字符串的长度是否为0</li><li><code>-n s1</code>&#8195; 测试s1字符串的长度是否不为0</li></ul></li><li>整数<ul><li><code>a -eq b</code>&#8195; 测试a与b是否<code>相等</code></li><li><code>a -ne b</code>&#8195; 测试a与b是否<code>不相等</code></li><li><code>a -gt b</code>&#8195; 测试a是否<code>大于</code>b</li><li><code>a -ge b</code>&#8195; 测试a是否<code>大于等于</code>b</li><li><code>a -lt b</code>&#8195; 测试a是否<code>小于</code>b</li><li><code>a -le b</code>&#8195; 测试a是否<code>小于等于</code>b</li></ul></li><li>文件属性<ul><li><code>-d name</code>&#8195; 测试name是否为一个<code>目录</code></li><li><code>-e name</code>&#8195; 测试一个文件<code>是否存在</code></li><li><code>-f name</code>&#8195; 测试name是否为<code>普通文件</code></li><li><code>-L name</code>&#8195; 测试name是否为<code>符号链接</code></li><li><code>-r name</code>&#8195; 测试name文件是否<code>存在</code>且为<code>可读</code></li><li><code>-w name</code>&#8195; 测试name文件是否<code>存在</code>且为<code>可写</code></li><li><code>-x name</code>&#8195; 测试name文件是否<code>存在</code>且为<code>可执行</code></li><li><code>-s name</code>&#8195; 测试name文件是否<code>存在</code>且其长度<code>不为0</code></li><li><code>f1 -nt f2</code>&#8195; 测试文件f1是否比文件f2<code>更新</code></li><li><code>f1 -ot f2</code>&#8195; 测试文件f1是否比文件f2<code>更旧</code></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03-makefile</title>
      <link href="/2020/02/04/03-makefile/"/>
      <url>/2020/02/04/03-makefile/</url>
      
        <content type="html"><![CDATA[<h1 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a>Makefile</h1><h2 id="VPATH的用法"><a href="#VPATH的用法" class="headerlink" title="VPATH的用法"></a>VPATH的用法</h2><ul><li>VPATH：虚路径<ul><li>在一些大的工程中，有大量的源文件，我们通常的做法是把这许多的源文件分类，并存放在不同的目录里。所以，当make需要去寻找文件的依赖关系时，你可以在文件前加上路径，但<code>最好的方法时把一个路径告诉make，让make自动去寻找</code>。</li><li>Makefile文件中的特殊变量”VPATH”就是完成这个功能的，如果没有指明这个变量，make只会在当前的目录中去找寻依赖文件和目标文件，到所指定的目录中去找寻文件了。</li><li><code>VPATH = src:../headers</code></li><li>上面的定义<code>指定两个目录</code>，<code>&quot;src&quot;</code>和<code>&quot;../headers&quot;</code>, make会按照这个顺序进行搜索，目录由”冒号”分隔。(当然，当前目录永远是最高优先搜索的地方)</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> makefile </category>
          
      </categories>
      
      
        <tags>
            
            <tag> makefile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02-makefile</title>
      <link href="/2020/02/04/02-makefile/"/>
      <url>/2020/02/04/02-makefile/</url>
      
        <content type="html"><![CDATA[<h1 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a>Makefile</h1><h2 id="make使用"><a href="#make使用" class="headerlink" title="make使用"></a>make使用</h2><ul><li>直接运行make</li><li>选项<ul><li>-C &#8195; dir读入指定目录下的Makefile</li><li>-f &#8195; file读入</li><li>-i &#8195; 忽略所有的命令执行错误</li><li>-I &#8195; dir指定被包含的Makefile所在目录</li><li>-n &#8195; 只打印要执行的命令，但不执行这些命令</li><li>-p &#8195; 显示make变量数据库和隐含规则</li><li>-s &#8195; 在执行命令时不显示命令</li><li>-w &#8195; 如果make在执行过程中改变目录，打印当前目录名</li></ul></li><li>makefile可以include + 文件名来引用其他文件中的内容<h2 id="Makefile的隐含规则"><a href="#Makefile的隐含规则" class="headerlink" title="Makefile的隐含规则"></a>Makefile的隐含规则</h2></li><li>隐含规则1：编译c程序的隐含规则<ul><li>“&lt;n&gt;.o”的目标的依赖目标会自动推导为”&lt;n&gt;.c”，并且其生成命令是”$(CC) -c $(CPPFLAGS) $(CFLAGS)”</li></ul></li><li>隐含规则2：链接Object文件的隐含规则<ul><li>“&lt;n&gt;”目标依赖于”&lt;n&gt;.o”，通过运行c的编译器来运行连接程序生成(一般是”ld”)，其生成命令是：”$(CC) $(LDFLAGS) &lt;n&gt;.o”</li><li>$(LOADLIBES) $(LDLIBS)。这个规则对于只有一个源文件的工程有效，同时也对多个Object文件(由不同的源文件生成)的也有效</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> makefile </category>
          
      </categories>
      
      
        <tags>
            
            <tag> makefile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01-makefile</title>
      <link href="/2020/02/04/01-makefile/"/>
      <url>/2020/02/04/01-makefile/</url>
      
        <content type="html"><![CDATA[<h1 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a>Makefile</h1><h2 id="Make简介"><a href="#Make简介" class="headerlink" title="Make简介"></a>Make简介</h2><ul><li>工程管理器，顾名思义，是指管理较多得文件</li><li>Make工程管理器也就是个<code>自动编译管理器</code>，这里得<code>自动</code>是指它能够根据文件时间戳<code>自动发现</code>更新过得文件而减少编译得工作量，同时，它通过读入Makefile文件得内容来执行大量得编译工作。</li><li><code>Make将只编译改动的代码文件，而不用完全编译</code><h2 id="Makefile基本结构"><a href="#Makefile基本结构" class="headerlink" title="Makefile基本结构"></a>Makefile基本结构</h2></li><li><code>Makefile</code>是Make读入的唯一配置文件<ul><li>由make工具创建的目标体(<code>target</code>)，通常是目标文件或可执行文件</li><li>要创建的目标体所依赖的文件(<code>dependency_file</code>)</li><li>创建每个目标体时需要运行的命令(<code>command</code>)</li><li><code>注意：</code>命令行前面必须是一个”<code>TAB</code>键”，否则编译错误</li></ul></li><li>Makefile格式  <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">target : dependency_files</span><br><span class="line">&lt;<span class="literal">TAB</span>&gt; <span class="keyword">command</span></span><br></pre></td></tr></table></figure></li><li>例子  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">hello</span> : <span class="selector-tag">hello</span><span class="selector-class">.c</span> <span class="selector-tag">hello</span><span class="selector-class">.h</span></span><br><span class="line">    <span class="selector-tag">gcc</span> <span class="selector-tag">-c</span> <span class="selector-tag">hello</span><span class="selector-class">.c</span> <span class="selector-tag">-o</span> <span class="selector-tag">hello</span><span class="selector-class">.o</span></span><br></pre></td></tr></table></figure></li><li>更复杂的例子  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">sunq</span> : <span class="selector-tag">kang</span><span class="selector-class">.o</span> <span class="selector-tag">yul</span><span class="selector-class">.o</span></span><br><span class="line">    <span class="selector-tag">gcc</span> <span class="selector-tag">kang</span><span class="selector-class">.o</span> <span class="selector-tag">yul</span><span class="selector-class">.o</span> <span class="selector-tag">-o</span> <span class="selector-tag">sunq</span></span><br><span class="line"><span class="selector-tag">kang</span><span class="selector-class">.o</span> : <span class="selector-tag">kang</span><span class="selector-class">.c</span> <span class="selector-tag">kang</span><span class="selector-class">.h</span></span><br><span class="line">    <span class="selector-tag">gcc</span> <span class="selector-tag">-Wall</span> <span class="selector-tag">-O</span> <span class="selector-tag">-g</span> <span class="selector-tag">-c</span> <span class="selector-tag">kang</span><span class="selector-class">.c</span> <span class="selector-tag">-o</span> <span class="selector-tag">kang</span><span class="selector-class">.o</span></span><br><span class="line"><span class="selector-tag">yul</span> : <span class="selector-tag">yul</span><span class="selector-class">.c</span></span><br><span class="line">    <span class="selector-tag">gcc</span> <span class="selector-tag">-Wall</span> <span class="selector-tag">-O</span> <span class="selector-tag">-g</span> <span class="selector-tag">-c</span> <span class="selector-tag">yul</span><span class="selector-class">.c</span> <span class="selector-tag">-o</span> <span class="selector-tag">yul</span><span class="selector-class">.o</span></span><br></pre></td></tr></table></figure></li><li>注释：<ul><li>-WALL表示允许发出gcc所有有用的报警信息</li><li>-c只是编译不链接，生成目标文件”.o”</li><li>-o file:表示把输出文件输出到file里<h2 id="创建和使用变量"><a href="#创建和使用变量" class="headerlink" title="创建和使用变量"></a>创建和使用变量</h2></li></ul></li><li>创建变量的目的：</li><li>用来代替一个文本字符串：  <ol><li>系列<code>文件的名字</code></li><li>传递给编译器的<code>参数</code></li><li>需要<code>运行的程序</code></li><li>需要查找<code>源代码的目录</code></li><li>你需要输出<code>信息的目录</code></li><li>你想做的其他事情</li></ol></li><li>变量定义的两种方式<ul><li>递归展开方式<code>VAR=var</code></li><li>简单方式<code>VAR:=var</code></li></ul></li><li>变量使用<code>$(VAR)</code></li><li>用<code>$</code>则用<code>$$</code>来表示</li><li>类似于编程语言中的宏定义</li><li>刚才的例子：  <figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">foo=<span class="constructor">$(<span class="params">bar</span>)</span></span><br><span class="line">bar=<span class="constructor">$(<span class="params">ugh</span>)</span></span><br><span class="line">ugh=Huh?</span><br><span class="line"><span class="constructor">$(<span class="params">foo</span>)</span>的值为?</span><br><span class="line">echo <span class="constructor">$(<span class="params">foo</span>)</span>来进行查看</span><br></pre></td></tr></table></figure><ul><li>优点：它可以向后引用变量</li><li>缺点：不能对该变量进行任何扩展</li></ul></li><li>用?=定义变量<br>&#8195;dir:=/foo/bar<br>&#8195;FOO?=bar<br>&#8195;FOO是?  <code>FOO之前没被定义过则被定义为bar</code></li><li>预定义变量<ul><li>AR &#8195; 库文件维护程序的名称，默认值为ar</li><li>CC &#8195; <code>C编译器</code>的名称，默认值为cc。CPP&#8195;C预编译器的名称，默认值为$(CC) -E</li><li>CXX &#8195; <code>C++编译器</code>的名称，默认值为g++</li><li>FC &#8195; <code>FORTRAN编译器</code>的名称，默认值为f77</li><li>RM &#8195; <code>文件删除</code>程序的名称，默认值为rm -f</li></ul></li><li>自动变量<ul><li>$* &#8195; <code>不包含扩展名</code>的目标文件名称</li><li>$+ &#8195; <code>所有的依赖文件</code>，以空格分开，并以出现的先后为序，可能包含重复的依赖文件</li><li>$&lt; &#8195; <code>第一个依赖文件</code>的名称</li><li>$? &#8195; <code>所有时间戳比目标文件晚的依赖文件</code>，并以空格分开</li><li>$@ &#8195; 目标文件的<code>完整名称</code></li><li>$^ &#8195; 所有<code>不重复的目标依赖文件</code>，以空格分开</li><li>$% &#8195; 如果目标是归档成员，则改变量表示目标的归档成员名称</li></ul></li><li>刚才的例子：  <figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">OBJS = kang.o yul.o</span><br><span class="line">CC = gcc</span><br><span class="line">CFLAGS = -Wall -O -g</span><br><span class="line">sunq : <span class="variable">$(OBJS)</span></span><br><span class="line">    <span class="variable">$(CC)</span> <span class="variable">$^</span> -o <span class="variable">$@</span></span><br><span class="line">kang.o : kang.c kang.h</span><br><span class="line">    <span class="variable">$(CC)</span> <span class="variable">$(CFLAGS)</span> -c <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br><span class="line">yul.o : yul.c yul.h</span><br><span class="line">    <span class="variable">$(CC)</span> <span class="variable">$(CFLAGS)</span> -c <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br></pre></td></tr></table></figure></li><li>环境变量<ul><li>make在启动时会自动读取系统当前已经定义了的环境变量，而且会创建与之具有相同名称和数值的变量</li><li>如果用户在Makefile中定义了相同名称的变量，那么用户自定义变量将会覆盖同名的环境变量</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> makefile </category>
          
      </categories>
      
      
        <tags>
            
            <tag> makefile </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
